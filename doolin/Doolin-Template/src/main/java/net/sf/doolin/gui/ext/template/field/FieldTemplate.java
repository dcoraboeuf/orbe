/*
 * Created on 15 août 07
 */
package net.sf.doolin.gui.ext.template.field;

import java.util.HashMap;
import java.util.Map;

import net.sf.doolin.gui.annotation.Configurable;
import net.sf.doolin.gui.core.support.GUIUtils;
import net.sf.doolin.gui.ext.template.Template;
import net.sf.doolin.gui.ext.template.TemplateEngine;
import net.sf.doolin.gui.ext.template.TemplateManager;
import net.sf.doolin.gui.field.AbstractSupportField;
import net.sf.doolin.gui.field.support.FieldSupportFactory;

/**
 * Read-only field that displays a template.
 * 
 * @author Damien Coraboeuf
 * @version $Id$
 */
public class FieldTemplate extends AbstractSupportField<TemplateSupport> {

	private String propertyVariable;

	private Map<String, Object> context = new HashMap<String, Object>();

	private String format;

	private String type;

	private String path;

	/**
	 * Sets the field as read only.
	 * 
	 * @see net.sf.doolin.gui.field.AbstractSupportField#init()
	 */
	@Override
	protected void init() {
		super.init();
		setReadOnly(true);
	}

	/**
	 * @see TemplateSupport
	 * @see #createSupport(Class)
	 * @see net.sf.doolin.gui.field.AbstractSupportField#createSupport()
	 */
	@Override
	protected TemplateSupport createSupport() {
		// Field support
		GUIUtils.getService(FieldSupportFactory.class).registerFieldSupport(TemplateSupport.class, SwingTemplateSupport.class);
		// Ok
		return createSupport(TemplateSupport.class);
	}

	public Object getFieldData(Object formData) {
		return null;
	}

	/**
	 * @see #setPropertyVariable(String)
	 * @see TemplateSupport#setContext(Map)
	 * @see net.sf.doolin.gui.field.Field#setFieldData(java.lang.Object,
	 *      java.lang.Object)
	 */
	public void setFieldData(Object formData, Object fieldData) {
		// Completes the context
		context.put(propertyVariable, fieldData);
		// Ok
		getSupport().setContext(context);
	}

	/**
	 * @see #setPropertyVariable(String)
	 * @return Variable name that contains the field data into the template
	 */
	public String getPropertyVariable() {
		return propertyVariable;
	}

	/**
	 * Sets the name of the variable that will be used in the template to
	 * contain the field data
	 * 
	 * @param propertyVariable
	 *            Variable name that contains the field data into the template
	 */
	@Configurable(mandatory = true, description = "Variable name for the field data in the template")
	public void setPropertyVariable(String propertyVariable) {
		this.propertyVariable = propertyVariable;
	}

	/**
	 * @see #setContext(Map)
	 * @return Template context
	 */
	public Map<String, Object> getContext() {
		return context;
	}

	/**
	 * Sets the evaluation context of the template
	 * 
	 * @param context
	 *            Template context
	 * @see Template#generate(java.io.Writer, Map)
	 */
	@Configurable(mandatory = false, description = "Map of objects for the template context")
	public void setContext(Map<String, Object> context) {
		this.context = context;
	}

	/**
	 * @see #setFormat(String)
	 * @return Template format
	 */
	public String getFormat() {
		return format;
	}

	/**
	 * Sets the format of the text which is generated by the template. It can be
	 * either <code>text/plain</code> or <code>text/html</code>.
	 * 
	 * @param format
	 *            Template format
	 */
	@Configurable(mandatory = true, description = "Format of the template: text/plain or text/html")
	public void setFormat(String format) {
		this.format = format;
	}

	/**
	 * @see #setPath(String)
	 * @return Template path
	 */
	public String getPath() {
		return path;
	}

	/**
	 * Sets the resource path to the template
	 * 
	 * @param path
	 *            Template path
	 * @see TemplateEngine#getTemplate(String)
	 */
	@Configurable(mandatory = true, description = "Resource path to the template definition")
	public void setPath(String path) {
		this.path = path;
	}

	/**
	 * @see #setType(String)
	 * @return Template type
	 */
	public String getType() {
		return type;
	}

	/**
	 * Sets the template engine type
	 * 
	 * @param type
	 *            Template type
	 * @see TemplateManager#getTemplateEngine(String)
	 */
	@Configurable(mandatory = true, description = "Template engine: Velocity, ...")
	public void setType(String type) {
		this.type = type;
	}

}
